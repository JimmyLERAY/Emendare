# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Amend {
  id: ID!
  created: DateTime!
  finished: DateTime!
  name: String!
  description: String!
  patch: String!
  version: Float!
  text: String!
  totalPotentialVotesCount: Float!
  closed: Boolean!
  accepted: Boolean!
  conflicted: Boolean!
  results: Results!
  arguments: [Argument!]!
  rules: Rules!
}

type AmendResponse {
  data: Amend
  error: Error
}

type Argument {
  id: ID!
  created: DateTime!
  text: String!
  type: String!
  upVotesCount: Float!
}

type DataFromGetEventsByGroup {
  events: [Event!]
  hasNextPage: Boolean!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Error {
  message: String!
  code: Float!
}

type Event {
  id: ID!
  created: DateTime!
  target: Target!
}

type EventResponse {
  data: Event
  error: Error
}

input EventsInputs {
  limit: Int!
  lastEventDate: String!
}

type EventsResponse {
  data: DataFromGetEventsByGroup
  error: Error
}

input IdInput {
  token: String!
  id: String!
}

type Mutation {
  postAmend(data: PostAmendInputs!): AmendResponse!
  upVoteAmend(data: IdInput!): AmendResponse!
  upDownAmend(data: IdInput!): AmendResponse!
  unVoteAmend(data: IdInput!): AmendResponse!
  postArgument(data: PostArgumentInputs!): AmendResponse!
  upVoteArgument(data: VoteArgumentInputs!): AmendResponse!
  upDownArgument(data: VoteArgumentInputs!): AmendResponse!
  unVoteArgument(data: VoteArgumentInputs!): AmendResponse!
  postText(data: PostTextInputs!): TextResponse!
  unFollowText(data: IdInput!): TextResponse!
  followText(data: IdInput!): TextResponse!
}

input PostAmendInputs {
  token: String!
  name: String!
  description: String!
  patch: String!
  version: Float!
  textID: String!
}

input PostArgumentInputs {
  token: String!
  text: String!
  type: String!
  amendID: String!
}

input PostTextInputs {
  token: String!
  name: String!
  description: String!
}

type Query {
  event(id: String!): EventResponse!
  events(data: EventsInputs!): EventsResponse!
  amend(token: String!, id: String!): AmendResponse!
  text(token: String!, id: String!): TextResponse!
  texts: TextsResponse!
}

type Results {
  totalPotentialVotesCount: Float!
  upVotesCount: Float!
  downVotesCount: Float!
  indVotesCount: Float!
}

type Rules {
  delayMax: Float!
}

type Target {
  type: String!
  id: String!
}

type Text {
  id: ID!
  created: DateTime!
  name: String!
  description: String!
  followersCount: Float!
  actual: String!
  patches: [String!]!
  amends: [String!]!
}

type TextResponse {
  data: Text
  error: Error
}

type TextsResponse {
  data: [String!]
  error: Error
}

input TokenInput {
  token: String!
}

input VoteArgumentInputs {
  amendID: String!
  argumentID: String!
}
